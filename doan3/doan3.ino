#include <Wire.h>
#include <LiquidCrystal_I2C.h>
#include <SPI.h>
#include <MFRC522.h>
#include <Servo.h>

#define SS_PIN 10
#define RST_PIN 9
#define SERVO_PIN 2
#define BUZZER_PIN A0
#define LED_PIN 7

// C·∫£m bi·∫øn h·ªìng ngo·∫°i 3 v·ªã tr√≠
#define IR_SENSOR_1 4
#define IR_SENSOR_2 5
#define IR_SENSOR_3 6
#define BUTTON_PIN A1

MFRC522 mfrc522(SS_PIN, RST_PIN);
Servo servo;
LiquidCrystal_I2C lcd(0x27, 16, 2);

int availableSlots = 3;  // Ch·ªâ thay ƒë·ªïi khi qu·∫πt th·∫ª
String parkedRFIDs[3] = {"", "", ""};  // L∆∞u ID xe trong b√£i

void setup() {
  pinMode(BUTTON_PIN, INPUT_PULLUP);  

    Serial.begin(9600);
    SPI.begin();
    mfrc522.PCD_Init();
    servo.attach(SERVO_PIN);
    servo.write(0);  
    
    pinMode(BUZZER_PIN, OUTPUT);
    pinMode(LED_PIN, OUTPUT);
    pinMode(IR_SENSOR_1, INPUT);
    pinMode(IR_SENSOR_2, INPUT);
    pinMode(IR_SENSOR_3, INPUT);
    pinMode(LED_PIN, OUTPUT);
    lcd.init();
    lcd.backlight();
    lcd.setCursor(0, 0);
    lcd.print("VKU SmartParking");

    delay(2000);
    displayParkingStatus();
    
}

void loop() {
   if (digitalRead(BUTTON_PIN) == LOW) {
        servo.write(90); // M·ªü c·ªïng
    } else {
        servo.write(0);  // ƒê√≥ng c·ªïng
    }
    
 

    displayParkingStatus();  

    if (mfrc522.PICC_IsNewCardPresent() && mfrc522.PICC_ReadCardSerial()) {
        String rfid = getRFID();
        lcd.clear();
        lcd.setCursor(0, 0);
        lcd.print("RFID: " + rfid);

        int index = findRFID(rfid);

        if (index != -1) {
            // üöó Xe r·ªùi b√£i ‚Üí availableSlots +1
            parkedRFIDs[index] = "";  
            availableSlots = min(availableSlots + 1, 3);  
            servo.write(90);  

            lcd.setCursor(2, 1);
            lcd.print("See you again!");
            buzzBuzzerTwice();
            delay(2000);
            
            displayAvailableSlots();
            servo.write(0);  
        } 
        else if (availableSlots > 0) {
            // üöò Xe v√†o ‚Üí availableSlots -1
            int emptyIndex = findEmptySlot();
            if (emptyIndex != -1) {
                parkedRFIDs[emptyIndex] = rfid;  
                availableSlots = max(availableSlots - 1, 0);  
                servo.write(90);  
                
                lcd.setCursor(4, 1);
                lcd.print("Welcome!");
                buzzBuzzerTwice();
                delay(2000);
                
                displayAvailableSlots();
                servo.write(0);  
            }
        }
        else {
            // ‚ùå Khi b√£i ƒë·∫ßy
            lcd.clear();
            lcd.setCursor(0, 0);
            lcd.print("Full slot!");
            
            buzzBuzzerLong();  
            delay(2000);
        }
    }

    delay(500);  
    digitalWrite(LED_PIN,HIGH); 
    delay(500);
    digitalWrite(LED_PIN,LOW);
    delay(500);
}

// üì∫ Hi·ªÉn th·ªã tr·∫°ng th√°i b√£i ƒë·ªó d·ª±a v√†o c·∫£m bi·∫øn h·ªìng ngo·∫°i
void displayParkingStatus() {
    lcd.clear();
    lcd.setCursor(0, 0);
    lcd.print("VKU SmartParking");

    lcd.setCursor(0, 1);
    lcd.print("S1:" + String(digitalRead(IR_SENSOR_1) == LOW ? "X " : "V "));
    lcd.print("S2:" + String(digitalRead(IR_SENSOR_2) == LOW ? "X " : "V "));
    lcd.print("S3:" + String(digitalRead(IR_SENSOR_3) == LOW ? "X " : "V "));
    
    delay(2000);
}

// üìä Hi·ªÉn th·ªã s·ªë ch·ªó tr·ªëng sau khi qu·∫πt th·∫ª
void displayAvailableSlots() {
    lcd.clear();
    lcd.setCursor(0, 0);
    lcd.print("Available: " + String(availableSlots) );

    delay(2000);
}

// üîé T√¨m RFID trong danh s√°ch xe ƒë√£ ƒë·ªó
int findRFID(String rfid) {
    for (int i = 0; i < 3; i++) {
        if (parkedRFIDs[i] == rfid) {
            return i;
        }
    }
    return -1;
}

// üîç T√¨m v·ªã tr√≠ tr·ªëng ƒë·ªÉ l∆∞u RFID khi xe v√†o
int findEmptySlot() {
    for (int i = 0; i < 3; i++) {
        if (parkedRFIDs[i] == "") {
            return i;
        }
    }
    return -1;
}

// üè∑Ô∏è L·∫•y RFID t·ª´ th·∫ª qu·∫πt
String getRFID() {
    String rfid = "";
    for (byte i = 0; i < mfrc522.uid.size; i++) {
        rfid.concat(String(mfrc522.uid.uidByte[i] < 0x10 ? "0" : ""));
        rfid.concat(String(mfrc522.uid.uidByte[i], HEX));
    }
    mfrc522.PICC_HaltA();
    return rfid;
}

// üì¢ C√≤i b√°o hi·ªáu ng·∫Øn
void buzzBuzzer(unsigned int duration) {
    digitalWrite(BUZZER_PIN, HIGH);
    delay(duration);
    digitalWrite(BUZZER_PIN, LOW);
}

// üîä C√≤i k√™u 2 l·∫ßn
void buzzBuzzerTwice() {
    for (int i = 0; i < 2; i++) {
        digitalWrite(BUZZER_PIN, HIGH);
        delay(100);
        digitalWrite(BUZZER_PIN, LOW);
        delay(300);
    }
}

// üîä C√≤i k√™u d√†i khi b√£i ƒë·∫ßy
void buzzBuzzerLong() {
    digitalWrite(BUZZER_PIN, HIGH);
    delay(1500);  // K√™u 1.5 gi√¢y
    digitalWrite(BUZZER_PIN, LOW);
}
